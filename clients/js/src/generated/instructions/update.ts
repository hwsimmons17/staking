/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  ACCOUNT_HEADER_SIZE,
  Context,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  mapSerializer,
  struct,
  u16,
  u32,
  u8,
} from '@metaplex-foundation/umi/serializers';
import { getMyAccountSize } from '../accounts';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';

// Accounts.
export type UpdateInstructionAccounts = {
  /** The address of the new account */
  address: Signer;
  /** The authority of the account */
  authority?: Signer;
};

// Data.
export type UpdateInstructionData = {
  discriminator: number;
  arg1: number;
  arg2: number;
};

export type UpdateInstructionDataArgs = { arg1: number; arg2: number };

export function getUpdateInstructionDataSerializer(): Serializer<
  UpdateInstructionDataArgs,
  UpdateInstructionData
> {
  return mapSerializer<UpdateInstructionDataArgs, any, UpdateInstructionData>(
    struct<UpdateInstructionData>(
      [
        ['discriminator', u8()],
        ['arg1', u16()],
        ['arg2', u32()],
      ],
      { description: 'UpdateInstructionData' }
    ),
    (value) => ({ ...value, discriminator: 1 })
  ) as Serializer<UpdateInstructionDataArgs, UpdateInstructionData>;
}

// Args.
export type UpdateInstructionArgs = UpdateInstructionDataArgs;

// Instruction.
export function update(
  context: Pick<Context, 'identity' | 'payer' | 'programs'>,
  input: UpdateInstructionAccounts & UpdateInstructionArgs
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'mplProjectName',
    'DkBb5dUHNsFsdPCLrDnUPDCuwFUtwpajJHLGWqb3ezFU'
  );

  // Accounts.
  const resolvedAccounts = {
    address: {
      index: 0,
      isWritable: true as boolean,
      value: input.address ?? null,
    },
    authority: {
      index: 1,
      isWritable: true as boolean,
      value: input.authority ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Arguments.
  const resolvedArgs: UpdateInstructionArgs = { ...input };

  // Default values.
  if (!resolvedAccounts.authority.value) {
    resolvedAccounts.authority.value = context.identity;
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getUpdateInstructionDataSerializer().serialize(
    resolvedArgs as UpdateInstructionDataArgs
  );

  // Bytes Updated On Chain.
  const bytesCreatedOnChain = getMyAccountSize() + ACCOUNT_HEADER_SIZE;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
